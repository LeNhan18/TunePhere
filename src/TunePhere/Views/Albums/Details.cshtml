@using System.Security.Claims
@using Microsoft.AspNetCore.Identity
@model TunePhere.Models.Album
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery

@{
    ViewData["Title"] = Model.AlbumName;
    var token = Antiforgery.GetAndStoreTokens(Context).RequestToken;
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
<input type="hidden" name="__RequestVerificationToken" value="@token" />

<style>
    .album-header {
        background: linear-gradient(transparent 0, rgba(0, 0, 0, .5) 100%);
        color: white;
        padding: 2rem;
        display: flex;
        align-items: flex-end;
        gap: 2rem;
    }

    .album-cover {
        width: 232px;
        height: 232px;
        box-shadow: 0 4px 60px rgba(0,0,0,.5);
    }

    .album-info {
        flex: 1;
    }

    .album-type {
        font-size: 0.875rem;
        font-weight: 700;
        text-transform: uppercase;
        margin-bottom: 0.5rem;
    }

    .album-title {
        font-size: 3rem;
        font-weight: 700;
        margin: 0.5rem 0;
    }

    .album-meta {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: #b3b3b3;
        font-size: 0.875rem;
    }

    .album-meta img {
        width: 24px;
        height: 24px;
        border-radius: 50%;
    }

    .track-list {
        padding: 1.5rem;
        background: #121212;
        min-height: calc(100vh - 400px);
    }

    .track-header {
        display: grid;
        grid-template-columns: 16px 4fr 2fr 1fr 1fr;
        padding: 0.5rem 1rem;
        color: #b3b3b3;
        font-size: 0.875rem;
        border-bottom: 1px solid rgba(255,255,255,.1);
        margin-bottom: 1rem;
    }

    .track-item {
        display: grid;
        grid-template-columns: 16px 4fr 2fr 1fr 1fr;
        padding: 0.5rem 1rem;
        color: white;
        border-radius: 4px;
        transition: background-color 0.2s;
        cursor: pointer;
        text-decoration: none;
    }

    .track-item:hover {
        background-color: rgba(255,255,255,.1);
    }

    .track-item:hover .track-number-text {
        display: none;
    }

    .track-item:hover .track-play-icon {
        display: inline-block !important;
    }

    .track-number {
        color: #b3b3b3;
        display: flex;
        align-items: center;
    }

    .track-play-icon {
        display: none;
        cursor: pointer;
    }

    .track-item:hover .track-play-icon {
        display: inline-block;
    }

    .track-title {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .track-title img {
        width: 40px;
        height: 40px;
    }

    .track-name {
        font-weight: 500;
        color: white;
        text-decoration: none;
        cursor: pointer;
    }
    
    .track-name:hover {
        text-decoration: underline;
        color: white;
    }

    .track-artist {
        color: #b3b3b3;
        font-size: 0.875rem;
    }

    .track-duration {
        color: #b3b3b3;
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .track-stats {
        color: #b3b3b3;
        font-size: 14px;
        display: flex;
        align-items: center;
    }

    .track-play-count {
        white-space: nowrap;
    }

    .track-actions {
        opacity: 0;
        transition: opacity 0.2s;
    }

    .track-item:hover .track-actions {
        opacity: 1;
    }

    .btn-play {
        width: 56px;
        height: 56px;
        border-radius: 50%;
        background-color: #1ed760;
        border: none;
        color: black;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.5rem;
        margin: 2rem 0;
        cursor: pointer;
        transition: transform 0.2s;
    }

    .btn-play:hover {
        transform: scale(1.05);
    }

    .btn-action {
        background: none;
        border: none;
        color: #b3b3b3;
        cursor: pointer;
        padding: 0.5rem;
        transition: color 0.2s;
    }

    .btn-action:hover {
        color: white;
    }

    .add-song-section {
        margin-top: 2rem;
        padding: 1rem;
        background: rgba(255,255,255,.05);
        border-radius: 8px;
    }

    .song-upload-form {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .form-group {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .form-group label {
        color: #b3b3b3;
        font-size: 0.875rem;
    }

    .form-group input {
        padding: 0.75rem;
        background: rgba(255,255,255,.1);
        border: none;
        border-radius: 4px;
        color: white;
    }

    .btn-submit {
        background: #1ed760;
        color: black;
        border: none;
        padding: 0.75rem;
        border-radius: 4px;
        font-weight: 700;
        cursor: pointer;
        transition: background-color 0.2s;
    }

    .btn-submit:hover {
        background: #1fdf64;
    }

    .playing {
        color: #1ed760;
    }

    .playing .track-name {
        color: #1ed760;
    }

    .now-playing-bar {
        position: fixed;
        bottom: 0;
        left: 0;
        right: 0;
        background: #181818;
        border-top: 1px solid #282828;
        padding: 16px;
        display: flex;
        align-items: center;
        z-index: 100;
        height: 90px;
    }

    .now-playing-left {
        width: 30%;
        display: flex;
        align-items: center;
    }

    .now-playing-cover {
        width: 56px;
        height: 56px;
        margin-right: 14px;
    }

    .now-playing-info {
        display: flex;
        flex-direction: column;
    }

    .now-playing-title {
        color: white;
        font-size: 14px;
        font-weight: 500;
    }

    .now-playing-artist {
        color: #b3b3b3;
        font-size: 12px;
    }

    .now-playing-center {
        flex: 1;
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .player-controls {
        display: flex;
        align-items: center;
        gap: 16px;
        margin-bottom: 8px;
    }

    .player-controls button {
        background: none;
        border: none;
        color: #b3b3b3;
        cursor: pointer;
        transition: color 0.2s;
    }

    .player-controls button:hover {
        color: white;
    }

    .player-controls .play-pause {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        background: white;
        color: black;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .playback-bar {
        width: 100%;
        max-width: 600px;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .progress-time {
        color: #b3b3b3;
        font-size: 11px;
        min-width: 40px;
        text-align: center;
    }

    .progress-bar {
        flex: 1;
        height: 4px;
        background: #535353;
        border-radius: 2px;
        position: relative;
        cursor: pointer;
    }

    .progress-bar-filled {
        height: 100%;
        background: #b3b3b3;
        border-radius: 2px;
        position: absolute;
        top: 0;
        left: 0;
        width: 0%;
    }

    .progress-bar:hover .progress-bar-filled {
        background: #1ed760;
    }

    .now-playing-right {
        width: 30%;
        display: flex;
        align-items: center;
        justify-content: flex-end;
    }

    .volume-controls {
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .volume-icon {
        color: #b3b3b3;
        cursor: pointer;
    }

    .volume-bar {
        width: 100px;
        height: 4px;
        background: #535353;
        border-radius: 2px;
        position: relative;
        cursor: pointer;
    }

    .volume-bar-filled {
        height: 100%;
        background: #b3b3b3;
        border-radius: 2px;
        position: absolute;
        top: 0;
        left: 0;
        width: 70%;
    }

    .volume-bar:hover .volume-bar-filled {
        background: #1ed760;
    }

    .song-item {
        display: grid;
        grid-template-columns: 16px 4fr 2fr 1fr 1fr;
        text-decoration: none;
        color: white;
    }

    .song-item:hover {
        text-decoration: none;
        color: white;
    }
</style>

<div class="album-header" style="background: linear-gradient(transparent 0, rgba(0, 0, 0, .5) 100%), url('@Model.ImageUrl') center/cover">
    <img src="@Model.ImageUrl" alt="@Model.AlbumName" class="album-cover">
    <div class="album-info">
        <div class="album-type">Album</div>
        <h1 class="album-title">@Model.AlbumName</h1>
        <div class="album-meta">
            @if (!string.IsNullOrEmpty(Model.Artists?.ImageUrl))
            {
                <img src="@Model.Artists.ImageUrl" alt="@Model.Artists.ArtistName">
            }
            <span>@Model.Artists?.ArtistName</span>
            <span>•</span>
            <span>@(Model.ReleaseDate ?? "")</span>
            <span>•</span>
            <span>@Model.numberSongs bài hát</span>
            <span>•</span>
            <span>@Model.Time.ToString("hh\\:mm\\:ss")</span>
        </div>
    </div>
</div>

<div class="track-list">
    <button class="btn-play">
        <i class="fas fa-play"></i>
    </button>

    <div class="track-header">
        <div>#</div>
        <div>Tiêu đề</div>
        <div>Ngày thêm</div>
        <div>Lượt nghe</div>
        <div>Thời lượng</div>
    </div>

    @foreach (var song in Model.Songs.OrderBy(s => s.UploadDate))
    {
        <div class="track-item" data-song-id="@song.SongId" data-song-url="@song.FileUrl" data-song-title="@song.Title" data-song-artist="@Model.Artists?.ArtistName" data-song-image="@song.ImageUrl">
            <div class="track-number">
                <span class="track-number-text">@(Model.Songs.ToList().IndexOf(song) + 1)</span>
                <i class="fas fa-play track-play-icon"></i>
            </div>
            <div class="track-title">
                <img src="@song.ImageUrl" alt="@song.Title">
                <div>
                    <a href="@Url.Action("Details", "Songs", new { id = song.SongId })" class="track-name">@song.Title</a>
                    <div class="track-artist">@Model.Artists?.ArtistName</div>
                </div>
            </div>
            <div class="track-artist">@song.UploadDate.ToString("dd/MM/yyyy")</div>
            <div class="track-stats">
                <span class="track-play-count">@song.PlayCount lượt nghe</span>
            </div>
            <div class="track-duration">
                <span>@song.Duration.ToString("mm\\:ss")</span>
                <div class="track-actions">
                    @if (User.IsInRole("Artist") && Model.Artists?.userId == User.FindFirst(ClaimTypes.NameIdentifier)?.Value)
                    {
                        <form asp-action="DeleteSong" method="post" class="d-inline">
                            <input type="hidden" name="songId" value="@song.SongId">
                            <button type="submit" class="btn-action" onclick="return confirm('Bạn có chắc chắn muốn xóa bài hát này?')" title="Xóa bài hát">
                                <i class="fas fa-trash"></i>
                            </button>
                        </form>
                    }
                </div>
            </div>
        </div>
    }

    @if (User.IsInRole("Artist") && Model.Artists?.userId == User.FindFirst(ClaimTypes.NameIdentifier)?.Value)
    {
        <div class="add-song-section">
            <h3>Bài hát</h3>
            <a asp-action="AddSong" asp-route-albumId="@Model.AlbumId" class="btn-submit" style="display: inline-block; text-decoration: none; text-align: center; padding: 12px 24px; font-size: 16px;">
                <i class="fas fa-plus"></i> Thêm bài nhạc mới
            </a>
        </div>
    }
</div>

<!-- Modal chọn playlist - Tạm thời vô hiệu hóa -->
<!--
<div class="modal fade" id="playlistModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Chọn playlist</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="list-group" id="playlistList">
                    <!-- Danh sách playlist sẽ được load động -->
                </div>
            </div>
        </div>
    </div>
</div>
-->

<!-- Thanh phát nhạc cố định ở dưới cùng -->
<div class="now-playing-bar" style="display: none;">
    <div class="now-playing-left">
        <img src="" alt="" class="now-playing-cover">
        <div class="now-playing-info">
            <div class="now-playing-title"></div>
            <div class="now-playing-artist"></div>
        </div>
    </div>
    <div class="now-playing-center">
        <div class="player-controls">
            <button id="prev-btn">
                <i class="fas fa-step-backward"></i>
            </button>
            <button class="play-pause" id="play-pause-btn">
                <i class="fas fa-play" id="play-icon"></i>
                <i class="fas fa-pause" id="pause-icon" style="display: none;"></i>
            </button>
            <button id="next-btn">
                <i class="fas fa-step-forward"></i>
            </button>
        </div>
        <div class="playback-bar">
            <div class="progress-time current-time">0:00</div>
            <div class="progress-bar">
                <div class="progress-bar-filled"></div>
            </div>
            <div class="progress-time duration-time">0:00</div>
        </div>
    </div>
    <div class="now-playing-right">
        <div class="volume-controls">
            <i class="fas fa-volume-up volume-icon"></i>
            <div class="volume-bar">
                <div class="volume-bar-filled"></div>
            </div>
        </div>
    </div>
    <!-- Thẻ audio sẽ được ẩn và điều khiển bằng JS -->
    <audio id="audio-player"></audio>
</div>

@section Scripts {
    <script>
        let selectedSongId = null;
        let selectedPlaylistId = null;
        let currentSongIndex = -1;
        let songs = [];
        const audioPlayer = document.getElementById('audio-player');

        $(document).ready(function() {
            // Tạo danh sách bài hát
            $('.track-item').each(function() {
                const songData = {
                    id: $(this).data('song-id'),
                    url: $(this).data('song-url'),
                    title: $(this).data('song-title'),
                    artist: $(this).data('song-artist'),
                    image: $(this).data('song-image'),
                    element: this
                };
                songs.push(songData);
            });

            // Xử lý sự kiện click vào icon play của bài hát
            $('.track-play-icon').click(function(e) {
                e.stopPropagation(); // Ngăn sự kiện lan ra phần tử cha
                
                const trackItem = $(this).closest('.track-item');
                const songId = trackItem.data('song-id');
                const songIndex = songs.findIndex(song => song.id === songId);
                
                if (songIndex !== -1) {
                    playSong(songIndex);
                }
            });
            
            // Khi click vào tên bài hát thì chuyển trang (hành vi mặc định của thẻ a)
            $('.track-name').click(function(e) {
                // Không tăng lượt nghe ở đây nữa, lượt nghe sẽ được tăng ở trang chi tiết bài hát
                // const songId = $(this).closest('.track-item').data('song-id');
                // incrementPlayCount(songId);
            });
            
            // Đảm bảo các phần khác của track-item không có tác dụng khi click
            $('.track-item').click(function(e) {
                // Nếu click vào form xóa bài hát hoặc nút action khác
                if ($(e.target).closest('form').length || $(e.target).closest('.btn-action').length) {
                    return; // Cho phép hành vi mặc định của các phần tử đó
                }
                
                // Nếu click vào track-play-icon hoặc track-name (là thẻ a), đã có xử lý riêng
                if ($(e.target).hasClass('track-play-icon') || 
                    $(e.target).hasClass('track-name') ||
                    $(e.target).closest('.track-name').length) {
                    return;
                }
                
                // Ngăn chặn hành vi mặc định cho các vùng khác
                e.preventDefault();
                e.stopPropagation();
            });

            // Xử lý sự kiện thêm vào playlist - Đã vô hiệu hóa
            /* 
            $('.add-to-playlist').click(function(e) {
                e.stopPropagation(); // Ngăn sự kiện click lan ra track-item
                selectedSongId = $(this).data('song-id');
                loadPlaylists();
                $('#playlistModal').modal('show');
            });
            */

            // Xử lý sự kiện ẩn modal playlist
            $('#playlistModal').on('hidden.bs.modal', function () {
                selectedSongId = null;
                selectedPlaylistId = null;
            });

            // Xử lý nút phát/dừng album
            $('.btn-play').click(function() {
                const icon = $(this).find('i');
                if (icon.hasClass('fa-play')) {
                    icon.removeClass('fa-play').addClass('fa-pause');
                    
                    // Nếu chưa phát bài hát nào, phát bài đầu tiên
                    if (currentSongIndex === -1 && songs.length > 0) {
                        playSong(0);
                    } else {
                        audioPlayer.play();
                        updatePlayPauseIcon(true);
                    }
                } else {
                    icon.removeClass('fa-pause').addClass('fa-play');
                    audioPlayer.pause();
                    updatePlayPauseIcon(false);
                }
            });

            // Xử lý nút phát/dừng trong thanh player
            $('#play-pause-btn').click(function() {
                if (audioPlayer.paused) {
                    audioPlayer.play();
                    updatePlayPauseIcon(true);
                } else {
                    audioPlayer.pause();
                    updatePlayPauseIcon(false);
                }
            });

            // Xử lý nút next
            $('#next-btn').click(function() {
                playNextSong();
            });

            // Xử lý nút previous
            $('#prev-btn').click(function() {
                playPreviousSong();
            });

            // Xử lý sự kiện kết thúc bài hát
            audioPlayer.addEventListener('ended', function() {
                playNextSong();
            });

            // Xử lý sự kiện đang phát
            audioPlayer.addEventListener('timeupdate', function() {
                updateProgress();
            });

            // Xử lý sự kiện click vào thanh progress
            $('.progress-bar').click(function(e) {
                const progressBar = $(this);
                const clickPosition = (e.pageX - progressBar.offset().left) / progressBar.width();
                const seekTime = audioPlayer.duration * clickPosition;
                audioPlayer.currentTime = seekTime;
                updateProgress();
            });

            // Xử lý sự kiện click vào thanh volume
            $('.volume-bar').click(function(e) {
                const volumeBar = $(this);
                const clickPosition = (e.pageX - volumeBar.offset().left) / volumeBar.width();
                audioPlayer.volume = clickPosition;
                $('.volume-bar-filled').css('width', (clickPosition * 100) + '%');
            });

            // Xử lý sự kiện click vào biểu tượng volume
            $('.volume-icon').click(function() {
                if (audioPlayer.volume > 0) {
                    audioPlayer.volume = 0;
                    $(this).removeClass('fa-volume-up').addClass('fa-volume-mute');
                    $('.volume-bar-filled').css('width', '0%');
                } else {
                    audioPlayer.volume = 0.7;
                    $(this).removeClass('fa-volume-mute').addClass('fa-volume-up');
                    $('.volume-bar-filled').css('width', '70%');
                }
            });
        });

        // Hàm phát bài hát theo index
        function playSong(index) {
            if (index < 0 || index >= songs.length) return;

            // Cập nhật currentSongIndex
            currentSongIndex = index;
            const song = songs[index];

            // Cập nhật UI
            $('.track-item').removeClass('playing');
            $(song.element).addClass('playing');

            // Cập nhật thanh player
            $('.now-playing-cover').attr('src', song.image);
            $('.now-playing-title').text(song.title);
            $('.now-playing-artist').text(song.artist);
            $('.now-playing-bar').show();

            // Cập nhật audio source và phát
            audioPlayer.src = song.url;
            audioPlayer.play()
                .then(() => {
                    // Phát thành công
                    updatePlayPauseIcon(true);
                    // Tăng playcount
                    incrementPlayCount(song.id);
                })
                .catch(error => {
                    console.error('Không thể phát nhạc:', error);
                    alert('Không thể phát bài hát này, vui lòng thử lại.');
                });
        }

        // Hàm phát bài tiếp theo
        function playNextSong() {
            if (currentSongIndex < songs.length - 1) {
                playSong(currentSongIndex + 1);
            } else if (songs.length > 0) {
                // Lặp lại từ đầu
                playSong(0);
            }
        }

        // Hàm phát bài trước đó
        function playPreviousSong() {
            if (currentSongIndex > 0) {
                playSong(currentSongIndex - 1);
            } else if (songs.length > 0) {
                // Lặp lại từ cuối
                playSong(songs.length - 1);
            }
        }

        // Hàm cập nhật icon play/pause
        function updatePlayPauseIcon(isPlaying) {
            if (isPlaying) {
                $('.btn-play i').removeClass('fa-play').addClass('fa-pause');
                $('#play-icon').hide();
                $('#pause-icon').show();
            } else {
                $('.btn-play i').removeClass('fa-pause').addClass('fa-play');
                $('#play-icon').show();
                $('#pause-icon').hide();
            }
        }

        // Hàm cập nhật thanh progress
        function updateProgress() {
            if (audioPlayer.duration) {
                const percent = (audioPlayer.currentTime / audioPlayer.duration) * 100;
                $('.progress-bar-filled').css('width', percent + '%');
                
                // Cập nhật thời gian
                $('.current-time').text(formatTime(audioPlayer.currentTime));
                $('.duration-time').text(formatTime(audioPlayer.duration));
            }
        }

        // Hàm format thời gian từ giây sang mm:ss
        function formatTime(seconds) {
            const mins = Math.floor(seconds / 60);
            const secs = Math.floor(seconds % 60);
            return `${mins}:${secs < 10 ? '0' : ''}${secs}`;
        }

        // Hàm tăng playcount
        function incrementPlayCount(songId) {
            // Kiểm tra nếu có token CSRF
            const tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
            const headers = tokenElement ? {
                'RequestVerificationToken': tokenElement.value
            } : {};
            
            fetch('/Songs/IncrementPlayCount/' + songId, {
                method: 'POST',
                headers: headers
            })
            .then(response => response.json())
            .then(data => {
                console.log('Đã tăng lượt nghe:', data.playCount);
                
                // Cập nhật số lượt nghe trên UI nếu có
                $(`.track-item[data-song-id="${songId}"]`).each(function() {
                    const playCountEl = $(this).find('.track-play-count');
                    if (playCountEl.length) {
                        playCountEl.text(data.playCount + ' lượt nghe');
                    }
                });
            })
            .catch(error => {
                console.error('Lỗi khi tăng lượt nghe:', error);
            });
        }

        // Các hàm liên quan đến playlist đã bị vô hiệu hóa
        /*
        function loadPlaylists() {
            $.get('/Albums/GetUserPlaylists', function(playlists) {
                const playlistList = $('#playlistList');
                playlistList.empty();

                playlists.forEach(function(playlist) {
                    const item = $('<a>')
                        .addClass('list-group-item list-group-item-action')
                        .text(playlist.name)
                        .click(function(e) {
                            e.preventDefault();
                            selectedPlaylistId = playlist.id;
                            addSongToPlaylist();
                        });
                    playlistList.append(item);
                });
            });
        }

        function addSongToPlaylist() {
            if (selectedSongId && selectedPlaylistId) {
                $.post('/Albums/AddToPlaylist', { 
                    songId: selectedSongId, 
                    playlistId: selectedPlaylistId 
                })
                .done(function(response) {
                    if (response.success) {
                        alert('Đã thêm bài hát vào playlist!');
                        $('#playlistModal').modal('hide');
                    }
                })
                .fail(function() {
                    alert('Có lỗi xảy ra khi thêm bài hát vào playlist.');
                });
            }
        }
        */
    </script>
} 