@{
    ViewData["Title"] = "Đăng ký tài khoản nghệ sĩ";
}

<div class="payment-container">
    <div class="payment-header">
        <h2>Đăng ký tài khoản nghệ sĩ</h2>
        <p class="price">480.000 VNĐ</p>
    </div>

    <div class="payment-benefits">
        <h3>Quyền lợi của nghệ sĩ:</h3>
        <ul>
            <li>Đăng tải và quản lý bài hát của riêng bạn</li>
            <li>Trang hồ sơ nghệ sĩ chuyên nghiệp</li>
            <li>Theo dõi thống kê người nghe</li>
            <li>Tương tác trực tiếp với người hâm mộ</li>
            <li>Khả năng kiếm tiền từ âm nhạc của bạn</li>
        </ul>
    </div>

    <div class="payment-form">
        <div id="card-element"></div>
        <button id="submit-button" class="btn btn-primary">Thanh toán</button>
        <div id="error-message" class="alert alert-danger" style="display: none"></div>
    </div>

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger">
            @TempData["ErrorMessage"]
        </div>
    }
</div>

<style>
.payment-container {
    max-width: 800px;
    margin: 40px auto;
    padding: 20px;
    background: rgba(255, 255, 255, 0.05);
    border-radius: 12px;
}

.payment-header {
    text-align: center;
    margin-bottom: 30px;
}

.price {
    font-size: 2.5em;
    color: #1DB954;
    font-weight: bold;
    margin: 20px 0;
}

.payment-benefits {
    margin-bottom: 30px;
}

.payment-benefits ul {
    list-style: none;
    padding: 0;
}

.payment-benefits li {
    padding: 10px 0;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

.payment-benefits li:before {
    content: "✓";
    color: #1DB954;
    margin-right: 10px;
}

.payment-form {
    text-align: center;
    margin-top: 30px;
}

#card-element {
    width: 300px;
    margin: 20px auto;
    padding: 10px;
    border-radius: 4px;
    border: 1px solid #ddd;
}

#submit-button {
    padding: 10px 20px;
    font-size: 16px;
    background-color: #1DB954;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}

#submit-button:hover {
    background-color: #15a443;
}

#error-message {
    margin-top: 10px;
    max-width: 400px;
    margin-left: auto;
    margin-right: auto;
}
</style>

<script src="https://js.stripe.com/v3/"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const stripe = Stripe('@ViewBag.StripePublicKey');
        const elements = stripe.elements();
        const cardElement = elements.create('card');
        cardElement.mount('#card-element');

        const submitButton = document.getElementById('submit-button');
        const errorMessage = document.getElementById('error-message');

        submitButton.addEventListener('click', async function() {
            try {
                const { paymentIntent, error } = await fetch('/Payment/CreatePaymentIntent', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ amount: 480000 })
                }).then(response => response.json());

                if (error) {
                    errorMessage.style.display = 'block';
                    errorMessage.textContent = error.message;
                    return;
                }

                const { paymentMethod } = await stripe.createPaymentMethod({
                    type: 'card',
                    card: cardElement,
                });

                if (paymentMethod.error) {
                    errorMessage.style.display = 'block';
                    errorMessage.textContent = paymentMethod.error.message;
                    return;
                }

                const confirmResult = await stripe.confirmCardPayment(paymentIntent.client_secret, {
                    payment_method: paymentMethod.id
                });

                if (confirmResult.error) {
                    errorMessage.style.display = 'block';
                    errorMessage.textContent = confirmResult.error.message;
                    return;
                }

                // Thanh toán thành công
                window.location.href = '/Payment/PaymentCallback?status=success';
            } catch (error) {
                errorMessage.style.display = 'block';
                errorMessage.textContent = error.message;
            }
        });
    });
</script>

.btn {
    padding: 15px 30px;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 10px;
    font-size: 1.1em;
    transition: all 0.3s ease;
}

.btn img {
    height: 30px;
}

.btn-vnpay {
    background: #004a9c;
    color: white;
}

.btn-mono {
    background: #2d2d2d;
    color: white;
}

.btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
}

.alert {
    margin-top: 20px;
    padding: 15px;
    border-radius: 8px;
}

.alert-danger {
    background: rgba(220, 53, 69, 0.1);
    color: #dc3545;
    border: 1px solid #dc3545;
}
</style>
